(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{369:function(e,t,n){"use strict";n.r(t);var s=n(45),a=Object(s.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"multimodal-real-time-bci-framework"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multimodal-real-time-bci-framework"}},[this._v("#")]),this._v(" Multimodal Real-time BCI framework")]),this._v(" "),t("p",[this._v("This framework is awesome!")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("\nutln   fcbomb\n\ndmaloy01\t E\n\n    Defused 7 phases with 0 explosions (bomb1)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nngrave01\t E\n\n    Defused 7 phases with 0 explosions (bomb2)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4b.c - A recursive function to sort out. \n * Computes powers of 7, must match the power of 7 randomly generated. \n */\n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nahacke01\t E\n\n    Defused 7 phases with 0 explosions (bomb3)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3b.c - A long switch statement that the compiler should\n * implement with a jump table. The user must enter both an index \n * into the table and the sum accumulated by falling through the rest \n * of the table \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nlliu17\tVG\n\n    Defused 7 phases with 1 explosions (bomb4)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4b.c - A recursive function to sort out. \n * Computes powers of 7, must match the power of 7 randomly generated. \n */\n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nbtivna01\tVG\n\n    Defused 6 phases with 2 explosions (bomb6)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3b.c - A long switch statement that the compiler should\n * implement with a jump table. The user must enter both an index \n * into the table and the sum accumulated by falling through the rest \n * of the table \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\ncneuha01\t G\n\n    Defused 7 phases with 6 explosions (bomb8)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\namirli01\t E\n\n    Defused 7 phases with 0 explosions (bomb9)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nklalic01\tVG\n\n    Defused 7 phases with 1 explosions (bomb10)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4b.c - A recursive function to sort out. \n * Computes powers of 7, must match the power of 7 randomly generated. \n */\n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\ncmelwa01\tVG\n\n    Defused 6 phases with 3 explosions (bomb12)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4b.c - A recursive function to sort out. \n * Computes powers of 7, must match the power of 7 randomly generated. \n */\n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\njgambh01\t F\n\n    Defused 7 phases with 10 explosions (bomb16)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3b.c - A long switch statement that the compiler should\n * implement with a jump table. The user must enter both an index \n * into the table and the sum accumulated by falling through the rest \n * of the table \n */\n/* \n * phase4b.c - A recursive function to sort out. \n * Computes powers of 7, must match the power of 7 randomly generated. \n */\n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nmgelem01\tVG\n\n    Defused 6 phases with 1 explosions (bomb18)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3b.c - A long switch statement that the compiler should\n * implement with a jump table. The user must enter both an index \n * into the table and the sum accumulated by falling through the rest \n * of the table \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\namasse03\tVG\n\n    Defused 6 phases with 1 explosions (bomb19)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3b.c - A long switch statement that the compiler should\n * implement with a jump table. The user must enter both an index \n * into the table and the sum accumulated by falling through the rest \n * of the table \n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\npgavaz01\t E\n\n    Defused 7 phases with 0 explosions (bomb20)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nwhuang08\tVG\n\n    Defused 6 phases with 0 explosions (bomb23)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3b.c - A long switch statement that the compiler should\n * implement with a jump table. The user must enter both an index \n * into the table and the sum accumulated by falling through the rest \n * of the table \n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nsoh13\t E\n\n    Defused 7 phases with 0 explosions (bomb24)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3b.c - A long switch statement that the compiler should\n * implement with a jump table. The user must enter both an index \n * into the table and the sum accumulated by falling through the rest \n * of the table \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nkvalia01\t E\n\n    Defused 7 phases with 0 explosions (bomb25)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nabutch02\t E\n\n    Defused 7 phases with 0 explosions (bomb27)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4b.c - A recursive function to sort out. \n * Computes powers of 7, must match the power of 7 randomly generated. \n */\n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nebrown26\t E\n\n    Defused 7 phases with 0 explosions (bomb28)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3b.c - A long switch statement that the compiler should\n * implement with a jump table. The user must enter both an index \n * into the table and the sum accumulated by falling through the rest \n * of the table \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nswang39\tVG\n\n    Defused 7 phases with 2 explosions (bomb29)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nrbaris01\tVG\n\n    Defused 7 phases with 1 explosions (bomb30)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nswilso16\t E\n\n    Defused 7 phases with 0 explosions (bomb31)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4b.c - A recursive function to sort out. \n * Computes powers of 7, must match the power of 7 randomly generated. \n */\n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\njyang20\t E\n\n    Defused 7 phases with 0 explosions (bomb32)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\ndchakr01\tVG\n\n    Defused 7 phases with 4 explosions (bomb34)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\npbheng01\tVG\n\n    Defused 7 phases with 2 explosions (bomb35)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\ngperry04\tVG\n\n    Defused 6 phases with 0 explosions (bomb36)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\naluc01\t E\n\n    Defused 7 phases with 0 explosions (bomb37)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\njclohi01\t E\n\n    Defused 7 phases with 0 explosions (bomb40)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nzlowen01\tVG\n\n    Defused 6 phases with 0 explosions (bomb41)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4b.c - A recursive function to sort out. \n * Computes powers of 7, must match the power of 7 randomly generated. \n */\n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nnmulli01\t E\n\n    Defused 7 phases with 0 explosions (bomb43)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nnsheri01\t E\n\n    Defused 7 phases with 0 explosions (bomb44)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nhxu06\t E\n\n    Defused 7 phases with 0 explosions (bomb48)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4b.c - A recursive function to sort out. \n * Computes powers of 7, must match the power of 7 randomly generated. \n */\n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\njfreem06\t E\n\n    Defused 7 phases with 0 explosions (bomb49)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nmbecke05\tVG\n\n    Defused 6 phases with 0 explosions (bomb50)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3b.c - A long switch statement that the compiler should\n * implement with a jump table. The user must enter both an index \n * into the table and the sum accumulated by falling through the rest \n * of the table \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nndaoud01\t G\n\n    Defused 6 phases with 5 explosions (bomb52)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nmmarat01\tVG\n\n    Defused 6 phases with 2 explosions (bomb53)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3b.c - A long switch statement that the compiler should\n * implement with a jump table. The user must enter both an index \n * into the table and the sum accumulated by falling through the rest \n * of the table \n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\npkang03\tVG\n\n    Defused 6 phases with 1 explosions (bomb54)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nabarg01\t E\n\n    Defused 7 phases with 0 explosions (bomb58)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nescian01\tVG\n\n    Defused 7 phases with 1 explosions (bomb63)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nnkuran01\t E\n\n    Defused 7 phases with 0 explosions (bomb64)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nmlangl02\tVG\n\n    Defused 6 phases with 0 explosions (bomb65)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nccheon01\tVG\n\n    Defused 7 phases with 3 explosions (bomb67)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\ndchang10\tVG\n\n    Defused 6 phases with 0 explosions (bomb69)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nmrigby01\t E\n\n    Defused 7 phases with 0 explosions (bomb71)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/*\n * phase5b.c - This stage requires the user to enter 6 numbers that are used\n * as offsets into the character array.  The six characters indexed\n * by the offsets must spell out a particular word.                   \n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nbbelle01\t E\n\n    Defused 7 phases with 0 explosions (bomb72)\n/* \n * phase1a.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\najacob13\tVG\n\n    Defused 7 phases with 1 explosions (bomb73)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4b.c - A recursive function to sort out. \n * Computes powers of 7, must match the power of 7 randomly generated. \n */\n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nogillm01\tVG\n\n    Defused 7 phases with 1 explosions (bomb74)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nmyao02\t E\n\n    Defused 7 phases with 0 explosions (bomb77)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3b.c - A long switch statement that the compiler should\n * implement with a jump table. The user must enter both an index \n * into the table and the sum accumulated by falling through the rest \n * of the table \n */\n/* \n * phase4a.c - A recursive function to sort out.  \n * Computes the fibonnaci number of its input, must match the fibonacci\n * number randomly generated. \n */\n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nsewenc01\tVG\n\n    Defused 6 phases with 1 explosions (bomb78)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\ncco01\tVG\n\n    Defused 7 phases with 1 explosions (bomb79)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2b.c - To defeat this stage the user must enter arithmetic \n * sequence of length 6 and delta = 5. \n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5c.c - This stage requires the user to enter 6 unique numbers that \n * are used as offsets into the integer array.  The sum of the six numbers\n * indexed by the offsets must equal a particular sum.             \n */\n/* \n * phase6a.c - The user has to enter a number that, when the list is sorted, \n * will show up in the proper position (chosen at random).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\njcarte06\tVG\n\n    Defused 6 phases with 0 explosions (bomb80)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6b.c - The user has to enter the node numbers (from 1 to 6) in \n * the order that they will occur when the list is sorted.\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\nlconet01\t E\n\n    Defused 7 phases with 0 explosions (bomb82)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2a.c - To defeat this stage the user must enter a sequence of \n * 6 factorial numbers  starting with 1.\n */\n/* \n * phase3b.c - A long switch statement that the compiler should\n * implement with a jump table. The user must enter both an index \n * into the table and the sum accumulated by falling through the rest \n * of the table \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\ndvenka01\tVG\n\n    Defused 6 phases with 0 explosions (bomb84)\n/* \n * phase1b.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3c.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table\n * and the character stored at that position in the table as well\n * as a number to be compared. \n */\n/* \n * phase4c.c - A recursive function to sort out.  \n * Computes the factorial number of their input, must match the factorial\n * number randomly generated. \n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\ndgratz01\tVG\n\n    Defused 6 phases with 3 explosions (bomb85)\n/* \n * phase1c.c - The user's input must match the specified string \n */\n/* \n * phase2c.c - To defeat this stage the user must enter sequence of \n * 6 numbers such that x[i] = x[i+3], not all zero.\n */\n/* \n * phase3a.c - A long switch statement that the compiler should implement\n * with a jump table. The user has to enter both an index into the table \n * and a value stored there.\n */\n/* \n * phase4b.c - A recursive function to sort out. \n * Computes powers of 7, must match the power of 7 randomly generated. \n */\n/* \n * phase5a.c - Just to be hairy, this traverses a loop of pointers and \n * counts its length.  The input determines where in the loop we begin. \n * Just to make sure the user isn't guessing, we make them input the sum of\n * the pointers encountered along the path, too.\n */\n/* \n * phase6c.c - Given a linked list of 9 nodes, the user has to enter the value\n * in the node that is in the kth place after sorting (where k is\n * generated randomly).\n */\n/* \n * phase7.c - The infamous secret stage! \n * The user has to find leaf value given path in a binary tree.\n */\n\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);